#ifndef JAVA_CLASS_NAMEMAP_H_
#define JAVA_CLASS_NAMEMAP_H_

#include <string>
#include <unordered_map>
#include <vector>

#include "java_class.h"

static const std::unordered_map<int, const char*> CONSTANT_POOL_TAGS_NAME_MAP = {
  {CONSTANT_Class, "CONSTANT_Class"},
  {CONSTANT_Fieldref, "CONSTANT_Fieldref"},
  {CONSTANT_Methodref, "CONSTANT_Methodref"},
  {CONSTANT_InterfaceMethodref, "CONSTANT_InterfaceMethodref"},
  {CONSTANT_String, "CONSTANT_String"},
  {CONSTANT_Integer, "CONSTANT_Integer"},
  {CONSTANT_Float, "CONSTANT_Float"},
  {CONSTANT_Long, "CONSTANT_Long"},
  {CONSTANT_Double, "CONSTANT_Double"},
  {CONSTANT_NameAndType, "CONSTANT_NameAndType"},
  {CONSTANT_Utf8, "CONSTANT_Utf8"},
  {CONSTANT_MethodHandle, "CONSTANT_MethodHandle"},
  {CONSTANT_MethodType, "CONSTANT_MethodType"},
  {CONSTANT_InvokeDynamic, "CONSTANT_InvokeDynamic"},
};

static const std::vector<std::pair<int, const char*>> CLASS_ACCESS_FLAGS_NAME_VECTOR = {
    {CLASS_ACC_PUBLIC, "CLASS_ACC_PUBLIC"},
    {CLASS_ACC_FINAL, "CLASS_ACC_FINAL"},
    {CLASS_ACC_SUPER, "CLASS_ACC_SUPER"},
    {CLASS_ACC_INTERFACE, "CLASS_ACC_INTERFACE"},
    {CLASS_ACC_ABSTRACT, "CLASS_ACC_ABSTRACT"},
    {CLASS_ACC_SYNTHETIC, "CLASS_ACC_SYNTHETIC"},
    {CLASS_ACC_ANNOTATION, "CLASS_ACC_ANNOTATION"},
    {CLASS_ACC_ENUM, "CLASS_ACC_ENUM"},
};

static const std::vector<std::pair<int, const char*>> INNER_CLASS_ACCESS_FLAGS_NAME_VECTOR = {
    {INNER_CLASS_ACC_PUBLIC, "INNER_CLASS_ACC_PUBLIC"},
    {INNER_CLASS_ACC_PRIVATE, "INNER_CLASS_ACC_PRIVATE"},
    {INNER_CLASS_ACC_PROTECTED, "INNER_CLASS_ACC_PROTECTED"},
    {INNER_CLASS_ACC_STATIC, "INNER_CLASS_ACC_STATIC"},
    {INNER_CLASS_ACC_FINAL, "INNER_CLASS_ACC_FINAL"},
    {INNER_CLASS_ACC_INTERFACE, "INNER_CLASS_ACC_INTERFACE"},
    {INNER_CLASS_ACC_ABSTRACT, "INNER_CLASS_ACC_ABSTRACT"},
    {INNER_CLASS_ACC_SYNTHETIC, "INNER_CLASS_ACC_SYNTHETIC"},
    {INNER_CLASS_ACC_ANNOTATION, "INNER_CLASS_ACC_ANNOTATION"},
    {INNER_CLASS_ACC_ENUM, "INNER_CLASS_ACC_ENUM"},
};

static const std::vector<std::pair<int, const char*>> FIELD_ACCESS_FLAGS_NAME_VECTOR = {
    {FIELD_ACC_PUBLIC, "FIELD_ACC_PUBLIC"},
    {FIELD_ACC_PRIVATE, "FIELD_ACC_PRIVATE"},
    {FIELD_ACC_PROTECTED, "FIELD_ACC_PROTECTED"},
    {FIELD_ACC_STATIC, "FIELD_ACC_STATIC"},
    {FIELD_ACC_FINAL, "FIELD_ACC_FINAL"},
    {FIELD_ACC_VOLATILE, "FIELD_ACC_VOLATILE"},
    {FIELD_ACC_TRANSIENT, "FIELD_ACC_TRANSIENT"},
    {FIELD_ACC_SYNTHETIC, "FIELD_ACC_SYNTHETIC"},
    {FIELD_ACC_ENUM, "FIELD_ACC_ENUM"},
};

static const std::vector<std::pair<int, const char*>> METHOD_ACCESS_FLAGS_NAME_VECTOR = {
    {METHOD_ACC_PUBLIC, "METHOD_ACC_PUBLIC"},
    {METHOD_ACC_PRIVATE, "METHOD_ACC_PRIVATE"},
    {METHOD_ACC_PROTECTED, "METHOD_ACC_PROTECTED"},
    {METHOD_ACC_STATIC, "METHOD_ACC_STATIC"},
    {METHOD_ACC_FINAL, "METHOD_ACC_FINAL"},
    {METHOD_ACC_SYNCHRONIZED, "METHOD_ACC_SYNCHRONIZED"},
    {METHOD_ACC_BRIDGE, "METHOD_ACC_BRIDGE"},
    {METHOD_ACC_VARARGS, "METHOD_ACC_VARARGS"},
    {METHOD_ACC_NATIVE, "METHOD_ACC_NATIVE"},
    {METHOD_ACC_ABSTRACT, "METHOD_ACC_ABSTRACT"},
    {METHOD_ACC_STRICT, "METHOD_ACC_STRICT"},
    {METHOD_ACC_SYNTHETIC, "METHOD_ACC_SYNTHETIC"},
};

static const std::unordered_map<int, const char*> CLASS_INST_OP_NAME_MAP = {
    {INST_NOP, "nop"},
    {INST_ACONST_NULL, "aconst_null"},
    {INST_ICONST_M1, "iconst_m1"},
    {INST_ICONST_0, "iconst_0"},
    {INST_ICONST_1, "iconst_1"},
    {INST_ICONST_2, "iconst_2"},
    {INST_ICONST_3, "iconst_3"},
    {INST_ICONST_4, "iconst_4"},
    {INST_ICONST_5, "iconst_5"},
    {INST_LCONST_0, "lconst_0"},
    {INST_LCONST_1, "lconst_1"},
    {INST_FCONST_0, "fconst_0"},
    {INST_FCONST_1, "fconst_1"},
    {INST_FCONST_2, "fconst_2"},
    {INST_DCONST_0, "dconst_0"},
    {INST_DCONST_1, "dconst_1"},
    {INST_BIPUSH, "bipush"},
    {INST_SIPUSH, "sipush"},
    {INST_LDC, "ldc"},
    {INST_LDC_W, "ldc_w"},
    {INST_LDC2_W, "ldc2_w"},
    {INST_ILOAD, "iload"},
    {INST_LLOAD, "lload"},
    {INST_FLOAD, "fload"},
    {INST_DLOAD, "dload"},
    {INST_ALOAD, "aload"},
    {INST_ILOAD_0, "iload_0"},
    {INST_ILOAD_1, "iload_1"},
    {INST_ILOAD_2, "iload_2"},
    {INST_ILOAD_3, "iload_3"},
    {INST_LLOAD_0, "lload_0"},
    {INST_LLOAD_1, "lload_1"},
    {INST_LLOAD_2, "lload_2"},
    {INST_LLOAD_3, "lload_3"},
    {INST_FLOAD_0, "fload_0"},
    {INST_FLOAD_1, "fload_1"},
    {INST_FLOAD_2, "fload_2"},
    {INST_FLOAD_3, "fload_3"},
    {INST_DLOAD_0, "dload_0"},
    {INST_DLOAD_1, "dload_1"},
    {INST_DLOAD_2, "dload_2"},
    {INST_DLOAD_3, "dload_3"},
    {INST_ALOAD_0, "aload_0"},
    {INST_ALOAD_1, "aload_1"},
    {INST_ALOAD_2, "aload_2"},
    {INST_ALOAD_3, "aload_3"},
    {INST_IALOAD, "iaload"},
    {INST_LALOAD, "laload"},
    {INST_FALOAD, "faload"},
    {INST_DALOAD, "daload"},
    {INST_AALOAD, "aaload"},
    {INST_BALOAD, "baload"},
    {INST_CALOAD, "caload"},
    {INST_SALOAD, "saload"},
    {INST_ISTORE, "istore"},
    {INST_LSTORE, "lstore"},
    {INST_FSTORE, "fstore"},
    {INST_DSTORE, "dstore"},
    {INST_ASTORE, "astore"},
    {INST_ISTORE_0, "istore_0"},
    {INST_ISTORE_1, "istore_1"},
    {INST_ISTORE_2, "istore_2"},
    {INST_ISTORE_3, "istore_3"},
    {INST_LSTORE_0, "lstore_0"},
    {INST_LSTORE_1, "lstore_1"},
    {INST_LSTORE_2, "lstore_2"},
    {INST_LSTORE_3, "lstore_3"},
    {INST_FSTORE_0, "fstore_0"},
    {INST_FSTORE_1, "fstore_1"},
    {INST_FSTORE_2, "fstore_2"},
    {INST_FSTORE_3, "fstore_3"},
    {INST_DSTORE_0, "dstore_0"},
    {INST_DSTORE_1, "dstore_1"},
    {INST_DSTORE_2, "dstore_2"},
    {INST_DSTORE_3, "dstore_3"},
    {INST_ASTORE_0, "astore_0"},
    {INST_ASTORE_1, "astore_1"},
    {INST_ASTORE_2, "astore_2"},
    {INST_ASTORE_3, "astore_3"},
    {INST_IASTORE, "iastore"},
    {INST_LASTORE, "lastore"},
    {INST_FASTORE, "fastore"},
    {INST_DASTORE, "dastore"},
    {INST_AASTORE, "aastore"},
    {INST_BASTORE, "bastore"},
    {INST_CASTORE, "castore"},
    {INST_SASTORE, "sastore"},
    {INST_POP, "pop"},
    {INST_POP2, "pop2"},
    {INST_DUP, "dup"},
    {INST_DUP_X1, "dup_x1"},
    {INST_DUP_X2, "dup_x2"},
    {INST_DUP2, "dup2"},
    {INST_DUP2_X1, "dup2_x1"},
    {INST_DUP2_X2, "dup2_x2"},
    {INST_SWAP, "swap"},
    {INST_IADD, "iadd"},
    {INST_LADD, "ladd"},
    {INST_FADD, "fadd"},
    {INST_DADD, "dadd"},
    {INST_ISUB, "isub"},
    {INST_LSUB, "lsub"},
    {INST_FSUB, "fsub"},
    {INST_DSUB, "dsub"},
    {INST_IMUL, "imul"},
    {INST_LMUL, "lmul"},
    {INST_FMUL, "fmul"},
    {INST_DMUL, "dmul"},
    {INST_IDIV, "idiv"},
    {INST_LDIV, "ldiv"},
    {INST_FDIV, "fdiv"},
    {INST_DDIV, "ddiv"},
    {INST_IREM, "irem"},
    {INST_LREM, "lrem"},
    {INST_FREM, "frem"},
    {INST_DREM, "drem"},
    {INST_INEG, "ineg"},
    {INST_LNEG, "lneg"},
    {INST_FNEG, "fneg"},
    {INST_DNEG, "dneg"},
    {INST_ISHL, "ishl"},
    {INST_LSHL, "lshl"},
    {INST_ISHR, "ishr"},
    {INST_LSHR, "lshr"},
    {INST_IUSHR, "iushr"},
    {INST_LUSHR, "lushr"},
    {INST_IAND, "iand"},
    {INST_LAND, "land"},
    {INST_IOR, "ior"},
    {INST_LOR, "lor"},
    {INST_IXOR, "ixor"},
    {INST_LXOR, "lxor"},
    {INST_IINC, "iinc"},
    {INST_I2L, "i2l"},
    {INST_I2F, "i2f"},
    {INST_I2D, "i2d"},
    {INST_L2I, "l2i"},
    {INST_L2F, "l2f"},
    {INST_L2D, "l2d"},
    {INST_F2I, "f2i"},
    {INST_F2L, "f2l"},
    {INST_F2D, "f2d"},
    {INST_D2I, "d2i"},
    {INST_D2L, "d2l"},
    {INST_D2F, "d2f"},
    {INST_I2B, "i2b"},
    {INST_I2C, "i2c"},
    {INST_I2S, "i2s"},
    {INST_LCMP, "lcmp"},
    {INST_FCMPL, "fcmpl"},
    {INST_FCMPG, "fcmpg"},
    {INST_DCMPL, "dcmpl"},
    {INST_DCMPG, "dcmpg"},
    {INST_IFEQ, "ifeq"},
    {INST_IFNE, "ifne"},
    {INST_IFLT, "iflt"},
    {INST_IFGE, "ifge"},
    {INST_IFGT, "ifgt"},
    {INST_IFLE, "ifle"},
    {INST_IF_ICMPEQ, "if_icmpeq"},
    {INST_IF_ICMPNE, "if_icmpne"},
    {INST_IF_ICMPLT, "if_icmplt"},
    {INST_IF_ICMPGE, "if_icmpge"},
    {INST_IF_ICMPGT, "if_icmpgt"},
    {INST_IF_ICMPLE, "if_icmple"},
    {INST_IF_ACMPEQ, "if_acmpeq"},
    {INST_IF_ACMPNE, "if_acmpne"},
    {INST_GOTO, "goto"},
    {INST_JSR, "jsr"},
    {INST_RET, "ret"},
    {INST_TABLESWITCH, "tableswitch"},
    {INST_LOOKUPSWITCH, "lookupswitch"},
    {INST_IRETURN, "ireturn"},
    {INST_LRETURN, "lreturn"},
    {INST_FRETURN, "freturn"},
    {INST_DRETURN, "dreturn"},
    {INST_ARETURN, "areturn"},
    {INST_RETURN, "return"},
    {INST_GETSTATIC, "getstatic"},
    {INST_PUTSTATIC, "putstatic"},
    {INST_GETFIELD, "getfield"},
    {INST_PUTFIELD, "putfield"},
    {INST_INVOKEVIRTUAL, "invokevirtual"},
    {INST_INVOKESPECIAL, "invokespecial"},
    {INST_INVOKESTATIC, "invokestatic"},
    {INST_INVOKEINTERFACE, "invokeinterface"},
    {INST_INVOKEDYNAMIC, "invokedynamic"},
    {INST_NEW, "new"},
    {INST_NEWARRAY, "newarray"},
    {INST_ANEWARRAY, "anewarray"},
    {INST_ARRAYLENGTH, "arraylength"},
    {INST_ATHROW, "athrow"},
    {INST_CHECKCAST, "checkcast"},
    {INST_INSTANCEOF, "instanceof"},
    {INST_MONITORENTER, "monitorenter"},
    {INST_MONITOREXIT, "monitorexit"},
    {INST_WIDE, "wide"},
    {INST_MULTIANEWARRAY, "multianewarray"},
    {INST_IFNULL, "ifnull"},
    {INST_IFNONNULL, "ifnonnull"},
    {INST_GOTO_W, "goto_w"},
    {INST_JSR_W, "jsr_w"},
};

std::unordered_map<int, const char*> CLASS_INST_ARRAY_TYPE_NAME_MAP = {
    {T_BOOLEAN, "T_BOOLEAN"},
    {T_CHAR, "T_CHAR"},
    {T_FLOAT, "T_FLOAT"},
    {T_DOUBLE, "T_DOUBLE"},
    {T_BYTE, "T_BYTE"},
    {T_SHORT, "T_SHORT"},
    {T_INT, "T_INT"},
    {T_LONG, "T_LONG"},
};

std::unordered_map<int, const char*> VERIFICATION_TYPE_NAME_MAP = {
    {ITEM_Top, "ITEM_Top"},
    {ITEM_Integer, "ITEM_Integer"},
    {ITEM_Float, "ITEM_Float"},
    {ITEM_Double, "ITEM_Double"},
    {ITEM_Long, "ITEM_Long"},
    {ITEM_Null, "ITEM_Null"},
    {ITEM_UninitializedThis, "ITEM_UninitializedThis"},
    {ITEM_Object, "ITEM_Object"},
    {ITEM_Uninitialized, "ITEM_Unitialized"},
};


static const char* FindMap(const std::unordered_map<int, const char*>& map, int value) {
  auto it = map.find(value);
  if (it != map.end()) {
    return it->second;
  }
  return "";
}

static std::string FindMaskVector(const std::vector<std::pair<int, const char*>>& v, int value) {
  std::string result;
  for (auto& p : v) {
    if (value & p.first) {
      if (!result.empty()) {
        result.push_back(' ');
      }
      result += p.second;
    }
  }
  return result;
}

#endif  // JAVA_CASS_NAMEMAP_H_
